 Clifford Multivector Toolbox for Matlab - Implementation Notes
--------------------------------------------------------------

This file sets out some notes on the internal implementation of the toolbox
particularly implementation limitations. These notes are partly explanatory
and partly to document issues that may be taken into account in development
of the toolbox in future, for example to remove or reduce the impact of an
implementation restriction.

Descriptor
----------

When an algebra is initialised, information about the algebra is stored in
a data structure called a descriptor. The structure of the descriptor is
documented in the file clifford_signature.m, which is where the descriptor
is initialised. For smaller algebras, the descriptor contains the
multiplication table for the current algebra, and this data is used by the
multiplication functions to compute the product of multivectors or
multivector matrices. For larger algebras the multiplication table is
computed dynamically, as needed (only those elements of the table that are
needed are computed). Smaller means 10 or fewer basis vectors (n <= 10).

Multivector storage
-------------------

Consider an algebra with n basis vectors and m = 2^n basis blades e1, e12
and so on, up to the pseudoscalar e1234...

Within a multivector array, there is a cell array of basis blades
representing coefficients of e0, e1, e2, etc. These coefficients are stored
in lexical order by grade. The sequence is e0, vectors, bivectors,
trivectors, and so on, with lexical ordering used within each grade. This
is also the order in which the toolbox displays the components of a
multivector in the command window. Sometimes it is necessary to access the
components using binary ordering in which each basis vector is represented
by one bit within an n-bit binary number. And of course, it is sometimes
necessary to map between these orderings/indices. A function is provided to
construct the mapping. It is called clifford_lexical_index_mapping. Data
produced by this function is stored in the descriptor.

For large algebras the time taken to operate on the cell array of
multivector elements is large even with vectorisation. A better arrangement
would be to use sparse storage for large algebras, storing a shortened cell
array of coefficients and a matching array of indices. In fact this might
be a better arrangement all round than using empty arrays in the cell array
to represent zero coefficients. This is a topic for study and possible
future implementation.

Implementation restrictions
---------------------------

As far as possible, we have designed the toolbox internal implementation so
that there are no restrictions other than available memory that will limit
the maximum dimension of algebra that can be initialized. When an algebra
is initialized with the function clifford_signature(p, q, r), an internal
descriptor is created. This is a global variable which is not by default
visible in the user's workspace, although it can be made visible by typing
the command 'global clifford_descriptor', or displayed in the command
window by the command 'descriptor'. Two key integer fields within the
descriptor determine the size of algebra: n is the number of basis vectors
e1, e2, e3, ..., en; and m is the total number of numeric components in a
multivector array. m is equal to 2^n.

In order to initialise an algebra, the clifford_signature function has to
compute the multiplication table of the algebra (not for large algebras
where the table is computed dynamically). The multiplication table is
stored in two tables, one for the sign, and one for the index. When two
basis elements are multiplied (e.g. e1 times e23) the product has a sign
which depends on the algebra, and the result must be stored in the
appropriate element of the multivector result - independent of the algebra
(in the example e123).
The sign is computed by the function clifford_sign, which returns a
two-dimensional array of int8 values, and the size of this array is m^2
bytes if all indices are used (the function can compute the sign for one
pair of values only, if needed, but in general works with vectors of
indices). The index table is also m-by-m, but it must contain larger integers,
to permit the initialisation of algebras with more than 256 elements in
each multivector. The next available Matlab integer type has 16 bits, and
thus the size of the index array is 2 m^2 bytes. The 16-bit index type
limits the size of algebra that can be initialised to 65536 elements in
each multivector.

So, the memory usage of the sign and index arrays is 3 m^2 bytes. An algebra
with n=10 (and therefore m=1024) requires 3M bytes of memory to store the
sign and index arrays. Adding one to n doubles the value of m, and therefore
quadruples the size of the sign and index arrays. With n = 16, m = 65536,
and 3 m^2 = 12G bytes. On a machine with less than 16GB of memory, this size
of data would cause very slow computation due to swapping, so the tables are
not computed on initialisation. Instead the elements needed are computed as
required (they are not cached, so they have to be computed afresh each time).

A second issue regarding size of algebra is the existence of parameterless
functions for the basis elements of the algebra. However, even with n = 16
and m = 65536, it is not impossible to create this number of small function
files on disk. Each file is less than 500 bytes in size, so only 32K bytes
of disk would be needed to store them all. If your disk uses 4K blocks, the
space required will be around 70Mbytes, which is not a problem with modern
disk sizes. From version 1.3 onwards, only a limited number of these files
were created in large algebras. See clifford_signature.m for reasons. In
later versions, the files are generated offline and distributed with the
toolbox. See clifford_parameterless_functions.m.

Multivectors are represented internally using cell arrays, one element of
the cell array for each numeric component, which is itself stored as an
array (everything in Matlab is an array). Some of these arrays may be empty,
representing components with an exact zero value (or array of exact zeros
to be precise). The function dump(a) will display the content of a
multivector for debugging purposes. Each multivector contains a copy of the
signature that was in use when the multivector was created.

The global variable clifford_descriptor contains the initialised parameters
of the algebra. This variable is normally loaded from a cached copy (see
below) and therefore computed from scratch only when an algebra is
initialised for the first time by a given version of the toolbox.


Single algebra paradigm
-----------------------

The current design of the toolbox assumes that one algebra is in use at any
time. However, each multivector that is created contains a copy of the
signature in use at the time it was created. This means that you can change
the current algebra, leaving multivectors in memory, and return later to an
algebra that you used previously by (re)initialising that algebra, and then
use the multivectors previously created.

This is not the only way the toolbox could work. Multiple algebras could
exist at once - each would have a descriptor and each multivector could
have a link (explicit or implicit) to its corresponding descriptor. Only
certain operations depend on the algebra in use - multiplication certainly,
and any operation that requires multiplication or inverses. However, some
operations can be done without recourse to the algebra. Examples are size,
plus, which can be implemented on a multivector even if the multivector was
created under a different algebra. Obviously some operations that take two
arguments require that these arguments are in the same algebra, and this
would have to be enforced.

Descriptor cacheing
-------------------

Initialisation of an algebra requires significant computation. From version
1.0 of the toolbox, the descriptors are written to file in a directory
called cache, and the function clifford_signature will load the descriptor
from this cache if it is available. The files in the cache are standard
Matlab MAT files. There are two possible issues with this implementation:

1. The format of the descriptor may change in a later release of the
   toolbox, which could lead to incompatibility with cached descriptors.

2. The format of the MAT file may change in a later release of MATLAB.

Both of these issues can be simply handled by deleting the cache directory,
which will cause the clifford_signature function to re-create the cache as
it initialises new algebras. Up to version 1.3 of the toolbox the cached
files were stored in sub-folders using the major and minor version numbers
of the toolbox. From version 1.4 the scheme is to use a version number
specific to the cache file formats, starting with v1. This means cache
files from one version of the toolbox can carry over to another, PROVIDED
the toolbox has not changed the cache file formats. If this happens a new
number will be used (v2, v3 etc), but this should be infrequent.

In version 1.4 we made a further change: to store the descriptor data in
the cache in two parts, one for the data that depends on the signature of
an algebra, and the other that does not depend on the signature but only on
the dimension of the algebra (this data is therefore common to all algebras
with the same dimension). This effects an economy of disk usage, which is
important if you initialise many algebras.

Indexing within class methods
-----------------------------

Matlab does not support normal array indexing within a class method. If
used, an obscure error occurs which has tripped us up more than once. The
class methods are all the M-functions inside the @clifford directory and
its sub-directories. If normal array indexing notation is employed inside
any of these functions to index a multivector array (but *not* other types
of arrays such as real or string), then Matlab will fail to call the
clifford subsref function. Instead, it will call its own built-in subsref
function, and the obscure error message

"??? Index exceeds matrix dimensions."

will usually occur (although in later versions of Matlab with implicit
singleton expansion, other symptoms seem to manifest). The workaround for
this is to use the clifford subsref function explictly. This is made
slightly easier by using the substruct function to construct the necessary
arguments. For example, the simple indexing operation m(k) has to be coded
as subsref(m, substruct('()', {k})). To see more elaborate examples, search
in the @clifford directory for files containing 'substruct'. A brief
mention of this can be found in the Matlab documentation under:
Programming/Classes and Objects/Designing User Classes, under the title:
Object Indexing within Methods. In more recent versions of Matlab, the help
information has been reorganized and the most relevant section is headed
(use search to find it): 'subsref and subsasgn Within Class Methods ?
Built-In Called' or in even more recent versions:
'Code Patterns for subsref and subsasgn Methods'.

Steve Sangwine
Eckhard Hitzer
August 2015
Updated June/July 2016
Updated April 2017
Updated July 2018
Updated April 2019
Updated May 2020
Updated July 2021

$Id: implementation_notes.txt 270 2021-07-11 19:42:06Z sangwine $