% Script to create the parameterless function files e0, e1, ... e123...efg.
% Prior to version 1.4 of the toolbox, these function files were created by
% clifford_signature when it initialised an algebra. From 1.4 onwards, the
% files are created by this script and distributed with the toolbox. The
% files to be created are defined in a list file (parameterless.lst), which
% is also used to make the distribution ZIP (with include.lst which lists
% all the other distribution files. To customize this script to create
% files not included in the distribution, edit the list file, rather than
% modifying this code. Note that it is possible to create parameterless
% functions with non-canonic index orders, for example, e21, which will
% produce a file that returns an appropriately signed e12, according to the
% signature of the algebra.

% Copyright © 2019 Stephen J. Sangwine and Eckhard Hitzer
% See the file : Copyright.m for further details.

% We create a string containing the entire file content. This is done in
% two parts: (1) the invariant lines from 3 to the end, and (2) the first
% two lines which contain the function name, and therefore need to be
% generated for each file.

% Invariant part of the file text, computed once outside the loop for
% speed. It is HERE that edits must be done if the content of these files
% is to be altered. It cannot be done by editing the files themselves as
% is noted in the warning message in the last two lines of each file.

t =     sprintf('%s\n', '% Copyright © 2015-2021 Stephen J. Sangwine and Eckhard Hitzer');
t = [t, sprintf('%s\n\n', '% See the file : Copyright.m for further details.')];
t = [t, sprintf('%s\n\n', 'narginchk(0,0), nargoutchk(0,1)')];
t = [t, sprintf('%s\n\n', 'global clifford_descriptor')];
t = [t, sprintf('%s\n\n', 'persistent p')];
t = [t, sprintf('%s\n',   '% If p has not been initialised previously, or if it has, but its')];
t = [t, sprintf('%s\n\n', '% signature differs from the current algebra, initialise it.')];
t = [t, sprintf('%s\n', 'if isempty(p) || any(get_signature(p) ~= clifford_descriptor.signature)')];
t = [t, sprintf('%s\n', '    p = clifford(mfilename);')];
t = [t, sprintf('%s\n\n', 'end')];
t = [t, sprintf('%s\n\n', 'result = p;')];
%t = [t, sprintf('%s\n\n', 'result = clifford(mfilename);')];
t = [t, sprintf('%s\n\n', 'end')];
t = [t, sprintf('%s\n', '% *** DO NOT EDIT THIS FILE --- it was automatically generated ***')];
t = [t, sprintf('%s\n', '% *** by the script file:   clifford_parameterless_functions.m ***')];

% Read in the names of the files to be generated, from the list file.

parameterlessfilename = [clifford_root, filesep, 'parameterless.lst'];
disp(['Reading file: ', parameterlessfilename]);
h = fopen(parameterlessfilename);
clear parameterlessfilename
f = textscan(h, '%s'); % This reads the whole file into f.
fclose(h);
clear h
J = f{1}; % A cell array, with one filename per element.
clear f

for i = 1:length(J)
    
    name = J{i};          % 'e0.m', 'e1.m', 'e12.m' etc.
    root = name(1:end-2); % 'e0',   'e1',   'e12' etc.
    
    % Now the first two lines of the file, plus the invariant tail end
    % lines created above.
    
    f =     sprintf('%s\n', ['function result = ', root]);
    f = [f, sprintf('%s\n\n', ['% ', upper(root), ...
                    ' Return basis element of current algebra.'])]; %#ok<*AGROW>
    f = [f, t];
    
    filename = [clifford_root, filesep, name];
        
    fid = fopen(filename, 'w'); % TODO This part of the process is very
    fprintf(fid, '%s', f);      % slow for large algebras. Can it be made
    fclose(fid);                % faster?
    
    % Now read the file back and confirm its contents. This is a precaution
    % against write-only folders, even though an error should occur when we
    % attempt to write the file. The cost of checking the file is so small
    % that it is worth doing this check as a belt-and-braces verification
    % that the file has been correctly written.
    
    if ~strcmp(f, fileread(filename))
        error(['Failed to write file: ', filename, ' correctly to disk.'])
    end
end

% $Id: clifford_parameterless_functions.m 277 2021-07-17 21:14:23Z sangwine $